Discussion.jsx  -
------------------
import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../context/AuthContext';
import io from 'socket.io-client';
import '../styles/Discussion.css';

const Discussion = ({ onClose, initialRoom }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const { user } = useAuth();
  const socketRef = useRef();
  const messagesEndRef = useRef(null);

  useEffect(() => {
    // Connect to Socket.io server
    socketRef.current = io('http://localhost:3001', {
      query: { room: initialRoom }
    });

    // Listen for incoming messages
    socketRef.current.on('message', (message) => {
      setMessages((prevMessages) => [...prevMessages, message]);
    });

    return () => {
      socketRef.current.disconnect();
    };
  }, [initialRoom]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (newMessage.trim() && user) {
      const messageData = {
        id: Date.now(),
        content: newMessage,
        sender: user.name || 'Anonymous',
        avatar: user.name ? user.name.split(' ').map(n => n[0]).join('') : 'A',
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        room: initialRoom
      };

      socketRef.current.emit('message', messageData);
      setMessages(prevMessages => [...prevMessages, messageData]);
      setNewMessage('');
    }
  };

  return (
    <div className="discussion-overlay">
      <div className="discussion-container">
        <div className="discussion-header">
          <h2>{initialRoom} Discussion</h2>
          <button className="btn-close" onClick={onClose}>&times;</button>
        </div>
        
        <div className="messages-container">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`message ${message.sender === user?.name ? 'message-sent' : ''}`}
            >
              <div className="message-avatar">{message.avatar}</div>
              <div className="message-content">
                <div className="message-info">
                  <div className="message-header">
                    <span className="message-sender">{message.sender}</span>
                  </div>
                  <span className="message-time">{message.timestamp}</span>
                  <p className="message-text">{message.content}</p>
                </div>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        <form className="message-form" onSubmit={handleSendMessage}>
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type your message..."
            className="message-input"
          />
          <button type="submit" className="send-button">
            Send
          </button>
        </form>
      </div>
    </div>
  );
};

export default Discussion; 

------------------
Footer.jsx -
--------------
import React from 'react';
import { Link } from 'react-router-dom';
import '../styles/Footer.css';

const Footer = () => {
  return (
    <footer className="footer">
      <div className="footer-content">
        <div className="brand-section">
          <Link to="/" className="logo">
            <div className="logo-icon">S</div>
            <span>StorySpark</span>
          </Link>
          <p>Empowering change through stories that inspire action and create global impact.</p>
          <div className="social-links">
            <Link to="#" aria-label="Twitter">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                <path d="M22 5.8a8.49 8.49 0 0 1-2.36.64 4.13 4.13 0 0 0 1.81-2.27 8.21 8.21 0 0 1-2.61 1 4.1 4.1 0 0 0-7 3.74 11.64 11.64 0 0 1-8.45-4.29 4.16 4.16 0 0 0-.55 2.07 4.09 4.09 0 0 0 1.82 3.41 4.05 4.05 0 0 1-1.86-.51v.05a4.1 4.1 0 0 0 3.3 4 4.1 4.1 0 0 1-1.86.07 4.11 4.11 0 0 0 3.83 2.84A8.22 8.22 0 0 1 3 18.34a11.57 11.57 0 0 0 6.29 1.85" />
              </svg>
            </Link>
            <Link to="#" aria-label="Discord">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20.317 4.492c-1.53-.69-3.17-1.2-4.885-1.49a.075.075 0 0 0-.079.036c-.21.369-.444.85-.608 1.23a18.566 18.566 0 0 0-5.487 0 12.36 12.36 0 0 0-.617-1.23A.077.077 0 0 0 8.562 3c-1.714.29-3.354.8-4.885 1.491a.07.07 0 0 0-.032.027C.533 9.093-.32 13.555.099 17.961a.08.08 0 0 0 .031.055 20.03 20.03 0 0 0 5.993 2.98.078.078 0 0 0 .084-.026 13.83 13.83 0 0 0 1.226-1.963.074.074 0 0 0-.041-.104 13.175 13.175 0 0 1-1.872-.878.075.075 0 0 1-.008-.125c.126-.093.252-.19.372-.287a.075.075 0 0 1 .078-.01c3.927 1.764 8.18 1.764 12.061 0a.075.075 0 0 1 .079.009c.12.098.245.195.372.288a.075.075 0 0 1-.006.125c-.598.344-1.22.635-1.873.877a.075.075 0 0 0-.041.105c.36.687.772 1.341 1.225 1.962a.077.077 0 0 0 .084.028 19.963 19.963 0 0 0 6.002-2.981.076.076 0 0 0 .032-.054c.5-5.094-.838-9.52-3.549-13.442a.06.06 0 0 0-.031-.028zM8.02 15.278c-1.182 0-2.157-1.069-2.157-2.38 0-1.312.956-2.38 2.157-2.38 1.21 0 2.176 1.077 2.157 2.38 0 1.312-.956 2.38-2.157 2.38zm7.975 0c-1.183 0-2.157-1.069-2.157-2.38 0-1.312.955-2.38 2.157-2.38 1.21 0 2.176 1.077 2.157 2.38 0 1.312-.946 2.38-2.157 2.38z" />
              </svg>
            </Link>
            <Link to="#" aria-label="Instagram">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2c2.717 0 3.056.01 4.122.06 1.065.05 1.79.217 2.428.465.66.254 1.216.598 1.772 1.153a4.908 4.908 0 0 1 1.153 1.772c.247.637.415 1.363.465 2.428.047 1.066.06 1.405.06 4.122 0 2.717-.01 3.056-.06 4.122-.05 1.065-.218 1.79-.465 2.428a4.883 4.883 0 0 1-1.153 1.772 4.915 4.915 0 0 1-1.772 1.153c-.637.247-1.363.415-2.428.465-1.066.047-1.405.06-4.122.06-2.717 0-3.056-.01-4.122-.06-1.065-.05-1.79-.218-2.428-.465a4.89 4.89 0 0 1-1.772-1.153 4.904 4.904 0 0 1-1.153-1.772c-.248-.637-.415-1.363-.465-2.428C2.013 15.056 2 14.717 2 12c0-2.717.01-3.056.06-4.122.05-1.066.217-1.79.465-2.428a4.88 4.88 0 0 1 1.153-1.772A4.897 4.897 0 0 1 5.45 2.525c.638-.248 1.362-.415 2.428-.465C8.944 2.013 9.283 2 12 2zm0 5a5 5 0 1 0 0 10 5 5 0 0 0 0-10zm6.5-.25a1.25 1.25 0 1 0-2.5 0 1.25 1.25 0 0 0 2.5 0zM12 9a3 3 0 1 1 0 6 3 3 0 0 1 0-6z" />
              </svg>
            </Link>
          </div>
        </div>

        <div className="footer-section">
          <h4>Platform</h4>
          <ul>
            <li><Link to="/browse-stories">Browse Stories</Link></li>
            <li><Link to="/content-library">Content Library</Link></li>
            <li><Link to="/impact-map">Impact Map</Link></li>
            <li><Link to="/resources">Resources</Link></li>
          </ul>
        </div>

        <div className="footer-section">
          <h4>Company</h4>
          <ul>
            <li><Link to="/about">About Us</Link></li>
            <li><Link to="/partners">Partners</Link></li>
            <li><Link to="/blog">Blog</Link></li>
            <li><Link to="/contact">Contact</Link></li>
          </ul>
        </div>

        <div className="footer-section">
          <h4>Stay Connected</h4>
          <p>Subscribe to our newsletter for updates and inspiration.</p>
          <form className="newsletter-form" onSubmit={(e) => e.preventDefault()}>
            <input type="email" placeholder="Your email" />
            <button type="submit">Subscribe</button>
          </form>
        </div>
      </div>
      
      <div className="footer-bottom">
        <div className="copyright">
          <p>&copy; {new Date().getFullYear()} StorySpark. All rights reserved.</p>
        </div>
        <div className="footer-links">
          <Link to="/terms">Terms of Service</Link>
          <Link to="/privacy">Privacy Policy</Link>
          <Link to="/cookies">Cookie Policy</Link>
        </div>
      </div>
    </footer>
  );
};

export default Footer; 


--------------
GroupChat.jsx -
-------------
import React, { useState, useEffect, useRef } from 'react';
import { ref, push, onValue, query, limitToLast, orderByChild, get } from 'firebase/database';
import { database } from '../config/firebase';
import { useAuth } from '../context/AuthContext';
import '../styles/GroupChat.css';

const CHAT_ROOMS = [
  { id: 'general', name: 'General' },
  { id: 'tech', name: 'Technology' },
  { id: 'health', name: 'Healthcare' },
  { id: 'education', name: 'Education' },
  { id: 'environment', name: 'Environment' }
];

// Preloaded messages for each room based on user interests
const PRELOADED_MESSAGES = {
  general: [
    {
      id: 'g1',
      content: "Hello everyone! Excited to be part of this community!",
      sender: "Sarah Johnson",
      avatar: "https://ui-avatars.com/api/?name=Sarah+Johnson&background=random",
      timestamp: Date.now() - 86400000 // 1 day ago
    },
    {
      id: 'g2',
      content: "Welcome Sarah! Great to have you here.",
      sender: "Michael Chen",
      avatar: "https://ui-avatars.com/api/?name=Michael+Chen&background=random",
      timestamp: Date.now() - 85400000
    }
  ],
  tech: [
    {
      id: 't1',
      content: "Has anyone explored the potential of AI in social impact projects?",
      sender: "Michael Chen",
      avatar: "https://ui-avatars.com/api/?name=Michael+Chen&background=random",
      timestamp: Date.now() - 82400000
    },
    {
      id: 't2',
      content: "Yes! I'm currently working on an AI-driven solution for accessible education.",
      sender: "Aisha Patel",
      avatar: "https://ui-avatars.com/api/?name=Aisha+Patel&background=random",
      timestamp: Date.now() - 81400000
    }
  ],
  health: [
    {
      id: 'h1',
      content: "Looking to collaborate on a mental health awareness campaign.",
      sender: "Emma Wilson",
      avatar: "https://ui-avatars.com/api/?name=Emma+Wilson&background=random",
      timestamp: Date.now() - 76400000
    },
    {
      id: 'h2',
      content: "I'd love to help! Healthcare accessibility is so important.",
      sender: "Aisha Patel",
      avatar: "https://ui-avatars.com/api/?name=Aisha+Patel&background=random",
      timestamp: Date.now() - 75400000
    }
  ],
  education: [
    {
      id: 'e1',
      content: "Working on a project to provide free educational resources to underserved communities.",
      sender: "Sarah Johnson",
      avatar: "https://ui-avatars.com/api/?name=Sarah+Johnson&background=random",
      timestamp: Date.now() - 66400000
    },
    {
      id: 'e2',
      content: "That's amazing! I can help with content development.",
      sender: "Aisha Patel",
      avatar: "https://ui-avatars.com/api/?name=Aisha+Patel&background=random",
      timestamp: Date.now() - 65400000
    }
  ],
  environment: [
    {
      id: 'ev1',
      content: "Just started a local tree-planting initiative. Anyone interested in joining?",
      sender: "Sarah Johnson",
      avatar: "https://ui-avatars.com/api/?name=Sarah+Johnson&background=random",
      timestamp: Date.now() - 56400000
    },
    {
      id: 'ev2',
      content: "Count me in! We need more green initiatives in our community.",
      sender: "David Rodriguez",
      avatar: "https://ui-avatars.com/api/?name=David+Rodriguez&background=random",
      timestamp: Date.now() - 55400000
    }
  ]
};

const GroupChat = () => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [currentRoom, setCurrentRoom] = useState('general');
  const [connections, setConnections] = useState([]);
  const [isPrivateChat, setIsPrivateChat] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { user } = useAuth();
  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);

  // Reset state when user changes
  useEffect(() => {
    // When the user changes, reset to general chat and clear private connections
    if (!user) {
      setCurrentRoom('general');
      setIsPrivateChat(false);
      setConnections([]);
      setMessages(PRELOADED_MESSAGES['general'] || []);
    }
  }, [user]);

  // Load user connections
  useEffect(() => {
    // Clear connections when user is not logged in
    if (!user) {
      setConnections([]);
      return;
    }

    const connectionsRef = ref(database, `connections/${user.uid}`);
    
    const unsubscribe = onValue(connectionsRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        // Create a map to store unique connections by name
        const uniqueConnections = new Map();
        
        Object.entries(data).forEach(([key, value]) => {
          // Only include explicitly created connections
          if (value && 
              value.name && 
              value.userId && 
              value.timestamp && 
              value.roomId &&
              value.isExplicitlyConnected === true) {
            const connectionKey = value.name.toLowerCase();
            const existingConnection = uniqueConnections.get(connectionKey);
            
            // Only keep the most recent connection for each unique name
            if (!existingConnection || value.timestamp > existingConnection.timestamp) {
              uniqueConnections.set(connectionKey, {
                ...value,
                roomId: `private_${[user.uid, value.userId].sort().join('_')}` // Consistent room ID format
              });
            }
          }
        });

        // Convert map to array and sort by most recent
        const connectionsList = Array.from(uniqueConnections.values())
          .sort((a, b) => b.timestamp - a.timestamp);

        setConnections(connectionsList);
      } else {
        setConnections([]);
      }
    });

    return () => unsubscribe();
  }, [user?.uid]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() && user) {
      const messageData = {
        content: newMessage.trim(),
        sender: user.displayName || user.name || 'Anonymous',
        senderEmail: user.email,
        avatar: user.photoURL || user.avatar || `https://ui-avatars.com/api/?name=${user.displayName || user.name || 'Anonymous'}&background=random`,
        timestamp: Date.now()
      };

      try {
        // Determine if this is a private chat or group chat
        const messagesPath = isPrivateChat 
          ? `privateMessages/${currentRoom.split('private_')[1]}`  // Extract the actual room ID
          : `messages/${currentRoom}`;
        const roomMessagesRef = ref(database, messagesPath);
        
        await push(roomMessagesRef, messageData);
        setNewMessage('');
        scrollToBottom();
      } catch (error) {
        console.error('Error sending message:', error);
        alert('Failed to send message. Please try again.');
      }
    } else if (!user) {
      alert('Please sign in to send messages.');
    }
  };

  useEffect(() => {
    setIsLoading(true);
    
    // If not logged in and trying to access private chat, redirect to general
    if (currentRoom?.includes('private_') && !user) {
      setCurrentRoom('general');
      return;
    }

    if (!currentRoom) return;

    // Clear previous messages when changing rooms
    setMessages([]);

    // Determine if this is a private chat
    const isPrivate = currentRoom.includes('private_');
    setIsPrivateChat(isPrivate);
    
    // If it's a private chat but doesn't belong to current user, reset to general
    if (isPrivate && user) {
      const roomParts = currentRoom.split('_');
      if (roomParts.length > 1 && !roomParts.includes(user.uid)) {
        setCurrentRoom('general');
        return;
      }
    }

    // Load preloaded messages for group chats only
    const preloadedMessages = !isPrivate ? (PRELOADED_MESSAGES[currentRoom] || []) : [];
    
    // Subscribe to messages for the current room
    const messagesPath = isPrivate 
      ? `privateMessages/${currentRoom.replace('private_', '')}` // Remove 'private_' prefix for storage
      : `messages/${currentRoom}`;
    const messagesRef = query(
      ref(database, messagesPath),
      orderByChild('timestamp'),
      limitToLast(100)
    );
    
    const unsubscribe = onValue(messagesRef, (snapshot) => {
      try {
        const messagesData = snapshot.val();
        if (messagesData) {
          const messagesList = Object.entries(messagesData).map(([key, value]) => ({
            id: key,
            ...value
          }));
          // Only combine with preloaded messages for group chats
          const allMessages = isPrivate 
            ? messagesList 
            : [...preloadedMessages, ...messagesList];
          
          setMessages(allMessages.sort((a, b) => a.timestamp - b.timestamp));
        } else {
          setMessages(isPrivate ? [] : preloadedMessages);
        }
      } catch (error) {
        console.error('Error loading messages:', error);
        setMessages(isPrivate ? [] : preloadedMessages);
      } finally {
        setIsLoading(false);
        scrollToBottom();
      }
    });

    return () => unsubscribe();
  }, [currentRoom, user]);

  const handleRoomChange = (roomId) => {
    if (!roomId) return;
    
    // Verify that private chats can only be accessed by the current user
    if (roomId.includes('private_') && !user) {
      setCurrentRoom('general');
      return;
    }
    
    // Clear previous messages before changing room
    setMessages([]);
    setCurrentRoom(roomId);
    setIsPrivateChat(roomId.includes('private_'));
  };

  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleString('en-US', {
      hour: 'numeric',
      minute: 'numeric',
      hour12: true,
      month: 'short',
      day: 'numeric'
    });
  };

  // Get the current room name with null checks
  const getCurrentRoomName = () => {
    if (!currentRoom) return 'Chat Room';
    
    if (currentRoom.includes('private_')) { // Check if it's a private chat
      const connection = connections.find(c => c.roomId === currentRoom);
      return connection ? ` ${connection.name}` : 'Private Chat';
    }
    const room = CHAT_ROOMS.find(room => room.id === currentRoom);
    return room ? `${room.name} Room` : 'Chat Room';
  };

  return (
    <div className="group-chat">
      <div className="chat-sidebar">
        <h3>Chat Rooms</h3>
        <div className="room-list">
          {CHAT_ROOMS.map((room) => (
            <button
              key={`room-${room.id}`}
              className={`room-button ${currentRoom === room.id ? 'active' : ''}`}
              onClick={() => handleRoomChange(room.id)}
            >
              {room.name}
            </button>
          ))}
          
          {user && connections.length > 0 && (
            <>
              <div className="private-chats-divider">Private Chats</div>
              {connections.map((connection) => (
                <button
                  key={`private-${connection.roomId}`}
                  className={`room-button private ${currentRoom === connection.roomId ? 'active' : ''}`}
                  onClick={() => handleRoomChange(connection.roomId)}
                >
                  <img 
                    src={connection.avatar} 
                    alt={connection.name}
                    className="private-chat-avatar"
                    onError={(e) => {
                      e.target.src = `https://ui-avatars.com/api/?name=${connection.name}&background=random`;
                    }}
                  />
                  <span className="private-chat-name">{connection.name}</span>
                </button>
              ))}
            </>
          )}
        </div>
      </div>

      <div className="chat-main">
        <div className="chat-header">
          <h2>{getCurrentRoomName()}</h2>
          {isPrivateChat && (
            <div className="chat-header-status">
              <span className="status-indicator online"></span>
              <span>Online</span>
            </div>
          )}
        </div>

        <div className="messages-container" ref={chatContainerRef}>
          {isLoading ? (
            <div className="loading-messages">
              <p>Loading messages...</p>
            </div>
          ) : messages.length === 0 ? (
            <div className="no-messages">
              <p>No messages in this chat yet. Be the first to send one!</p>
            </div>
          ) : (
            messages.map((message, index) => (
              <div
                key={message.id || `msg-${index}`}
                className={`message ${message.senderEmail === user?.email ? 'own-message' : ''}`}
              >
                <img 
                  src={message.avatar} 
                  alt={message.sender} 
                  className="message-avatar"
                  onError={(e) => {
                    e.target.src = `https://ui-avatars.com/api/?name=${message.sender}&background=random`;
                  }}
                />
                <div className="message-content">
                  <div className="message-header">
                    <span className="sender-name">{message.sender}</span>
                    <span className="timestamp">{formatTimestamp(message.timestamp)}</span>
                  </div>
                  <p>{message.content}</p>
                </div>
              </div>
            ))
          )}
          <div ref={messagesEndRef} />
        </div>

        <form className="message-form" onSubmit={handleSendMessage}>
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder={user ? `Type your message in ${getCurrentRoomName()}...` : 'Please sign in to send messages'}
            className="message-input"
            disabled={!user}
          />
          <button 
            type="submit" 
            className="send-button" 
            disabled={!newMessage.trim() || !user}
          >
            Send
          </button>
        </form>
      </div>
    </div>
  );
};

export default GroupChat; 


-----------------
Login.jsx -
------------------
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { FaEnvelope, FaLock, FaSpinner } from 'react-icons/fa';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [formErrors, setFormErrors] = useState({});
  const { login, loading, error } = useAuth();
  const navigate = useNavigate();

  const validateForm = () => {
    const errors = {};
    if (!email) errors.email = 'Email is required';
    else if (!/\S+@\S+\.\S+/.test(email)) errors.email = 'Email is invalid';
    if (!password) errors.password = 'Password is required';
    else if (password.length < 6) errors.password = 'Password must be at least 6 characters';
    return errors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const errors = validateForm();
    if (Object.keys(errors).length === 0) {
      try {
        await login(email, password);
        navigate('/');
      } catch (err) {
        console.error('Login failed:', err);
      }
    } else {
      setFormErrors(errors);
    }
  };

  return (
    <div className="auth-container">
      <div className="auth-card">
        <h2>Welcome Back</h2>
        <p>Sign in to continue your journey</p>
        
        {error && <div className="error-message">{error}</div>}
        
        <form onSubmit={handleSubmit} className="auth-form">
          <div className="form-group">
            <label htmlFor="email">
              <FaEnvelope /> Email
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Enter your email"
              className={formErrors.email ? 'error' : ''}
            />
            {formErrors.email && <span className="error-text">{formErrors.email}</span>}
          </div>

          <div className="form-group">
            <label htmlFor="password">
              <FaLock /> Password
            </label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter your password"
              className={formErrors.password ? 'error' : ''}
            />
            {formErrors.password && <span className="error-text">{formErrors.password}</span>}
          </div>

          <button type="submit" className="btn btn-primary" disabled={loading}>
            {loading ? <FaSpinner className="spinner" /> : 'Sign In'}
          </button>
        </form>

        <div className="auth-footer">
          <p>Don't have an account? <a href="/register">Sign up</a></p>
          <a href="/forgot-password">Forgot password?</a>
        </div>
      </div>
    </div>
  );
}

export default Login; 

---------------
Navbar.jsx -
---------------
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom'; // Import useNavigate
import { FaHeart, FaBook, FaUsers, FaInfoCircle, FaUser, FaSignOutAlt, FaComments } from 'react-icons/fa';
import { useAuth } from '../context/AuthContext';

function Navbar() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const { user, logout } = useAuth();
  const navigate = useNavigate(); // Add useNavigate hook

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const toggleUserMenu = () => {
    setIsUserMenuOpen(!isUserMenuOpen);
  };

  const handleLogout = () => {
    logout(); // Call the logout function from AuthContext
    navigate('/'); // Navigate to the specified URL
  };

  return (
    <nav className="navbar">
      <div className="navbar-container">
        <Link to="/" className="navbar-logo">
          StorySpark
        </Link>
        <button className="menu-toggle" onClick={toggleMenu}>
          <span className="menu-icon"></span>
        </button>
        <div className={`navbar-menu ${isMenuOpen ? 'active' : ''}`}>
          <Link to="/stories" className="nav-link">Stories</Link>
          <Link to="/content" className="nav-link">Content Library</Link>
          <Link to="/map" className="nav-link">Connect</Link>
          <Link to="/community" className="nav-link">Community</Link>
          {user ? (
            <div className="user-menu">
              <button className="user-menu-button" onClick={toggleUserMenu}>
                <img 
                  src={user.avatar} 
                  alt={user.name} 
                  className="user-avatar" 
                  onError={(e) => {
                    e.target.src = `https://ui-avatars.com/api/?name=${user.name}&background=random`;
                  }}
                />
              </button>
              {isUserMenuOpen && (
                <div className="user-dropdown">
                  <Link to="/profile" className="dropdown-item">
                    <FaUser /> Profile
                  </Link>
                  <button onClick={handleLogout} className="dropdown-item">
                    <FaSignOutAlt /> Logout
                  </button>
                </div>
              )}
            </div>
          ) : (
            <Link to="/login" className="nav-link">Sign In</Link>
          )}
        </div>
      </div>
    </nav>
  );
}

export default Navbar;


--------------------------------
YouTubeViideoCard.jsx -
--------------------------------
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../styles/YouTubeVideoCard.css';

const YouTubeVideoCard = ({ videoId }) => {
  const [videoData, setVideoData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchVideoData = async () => {
      try {
        const response = await axios.get(
          `https://www.googleapis.com/youtube/v3/videos`,
          {
            params: {
              part: 'snippet,statistics',
              id: videoId,
              // key: 'YOUR_API_KEY' // Replace with your actual API key 1, Google
            }
          }
        );

        if (response.data.items && response.data.items.length > 0) {
          setVideoData(response.data.items[0]);
        } else {
          setError('Video not found');
        }
      } catch (err) {
        setError('Failed to fetch video data');
        console.error('Error fetching video data:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchVideoData();
  }, [videoId]);

  if (loading) {
    return <div className="video-card loading">Loading...</div>;
  }

  if (error) {
    return <div className="video-card error">{error}</div>;
  }

  if (!videoData) {
    return null;
  }

  const formatNumber = (num) => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    }
    if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  };

  return (
    <div className="video-card">
      <div className="video-thumbnail">
        <img
          src={videoData.snippet.thumbnails.high.url}
          alt={videoData.snippet.title}
        />
        <div className="video-duration">
          {/* You can add duration if needed */}
        </div>
      </div>
      <div className="video-info">
        <h3 className="video-title">{videoData.snippet.title}</h3>
        <div className="video-stats">
          <span className="views">
            {formatNumber(videoData.statistics.viewCount)} views
          </span>
          <span className="likes">
            {formatNumber(videoData.statistics.likeCount)} likes
          </span>
        </div>
        <div className="video-description">
          {videoData.snippet.description.substring(0, 100)}...
        </div>
        <div className="video-meta">
          <span className="channel-name">{videoData.snippet.channelTitle}</span>
          <span className="publish-date">
            {new Date(videoData.snippet.publishedAt).toLocaleDateString()}
          </span>
        </div>
      </div>
    </div>
  );
};

export default YouTubeVideoCard; 